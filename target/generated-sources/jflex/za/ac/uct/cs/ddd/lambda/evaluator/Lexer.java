/* The following code was generated by JFlex 1.6.0 */

package za.ac.uct.cs.ddd.lambda.evaluator;

import static za.ac.uct.cs.ddd.lambda.evaluator.TokenType.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>/home/matthew/Repos/Capstone/csc-capstone/src/main/jflex/za/ac/uct/cs/ddd/lambda/evaluator/Lexer.jflex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\6\0\1\12"+
    "\1\4\1\5\3\0\1\10\1\7\1\0\12\13\4\0\1\11\2\0"+
    "\32\12\1\0\1\6\2\0\1\12\1\0\32\12\57\0\1\12\12\0"+
    "\1\12\4\0\1\12\5\0\27\12\1\0\37\12\1\0\u01ca\12\4\0"+
    "\14\12\16\0\5\12\7\0\1\12\1\0\1\12\201\0\5\12\1\0"+
    "\2\12\2\0\4\12\1\0\1\12\6\0\1\12\1\0\3\12\1\0"+
    "\1\12\1\0\24\12\1\0\30\12\1\6\72\12\1\0\213\12\10\0"+
    "\246\12\1\0\46\12\2\0\1\12\7\0\47\12\110\0\33\12\5\0"+
    "\3\12\55\0\53\12\25\0\12\13\4\0\2\12\1\0\143\12\1\0"+
    "\1\12\17\0\2\12\7\0\2\12\12\13\3\12\2\0\1\12\20\0"+
    "\1\12\1\0\36\12\35\0\131\12\13\0\1\12\16\0\12\13\41\12"+
    "\11\0\2\12\4\0\1\12\5\0\26\12\4\0\1\12\11\0\1\12"+
    "\3\0\1\12\27\0\31\12\107\0\23\12\121\0\66\12\3\0\1\12"+
    "\22\0\1\12\7\0\12\12\4\0\12\13\1\0\20\12\4\0\10\12"+
    "\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12"+
    "\3\0\1\12\20\0\1\12\15\0\2\12\1\0\3\12\4\0\12\13"+
    "\2\12\23\0\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\2\12\1\0\2\12\37\0\4\12\1\0\1\12\7\0"+
    "\12\13\2\0\3\12\20\0\11\12\1\0\3\12\1\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\5\12\3\0\1\12\22\0\1\12\17\0"+
    "\2\12\4\0\12\13\25\0\10\12\2\0\2\12\2\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\5\12\3\0\1\12\36\0\2\12\1\0"+
    "\3\12\4\0\12\13\1\0\1\12\21\0\1\12\1\0\6\12\3\0"+
    "\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\3\0\3\12\3\0\14\12\26\0\1\12\25\0\12\13\25\0"+
    "\10\12\1\0\3\12\1\0\27\12\1\0\20\12\3\0\1\12\32\0"+
    "\2\12\6\0\2\12\4\0\12\13\25\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\3\0\1\12\40\0\1\12\1\0"+
    "\2\12\4\0\12\13\1\0\2\12\22\0\10\12\1\0\3\12\1\0"+
    "\51\12\2\0\1\12\20\0\1\12\21\0\2\12\4\0\12\13\12\0"+
    "\6\12\5\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0"+
    "\7\12\37\0\12\13\21\0\60\12\1\0\2\12\14\0\7\12\11\0"+
    "\12\13\47\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0"+
    "\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0"+
    "\1\12\2\0\2\12\1\0\4\12\1\0\2\12\11\0\1\12\2\0"+
    "\5\12\1\0\1\12\11\0\12\13\2\0\4\12\40\0\1\12\37\0"+
    "\12\13\26\0\10\12\1\0\44\12\33\0\5\12\163\0\53\12\24\0"+
    "\1\12\12\13\6\0\6\12\4\0\4\12\3\0\1\12\3\0\2\12"+
    "\7\0\3\12\4\0\15\12\14\0\1\12\1\0\12\13\6\0\46\12"+
    "\1\0\1\12\5\0\1\12\2\0\53\12\1\0\u014d\12\1\0\4\12"+
    "\2\0\7\12\1\0\1\12\1\0\4\12\2\0\51\12\1\0\4\12"+
    "\2\0\41\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12"+
    "\2\0\17\12\1\0\71\12\1\0\4\12\2\0\103\12\45\0\20\12"+
    "\20\0\125\12\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0\113\12"+
    "\6\0\10\12\7\0\15\12\1\0\4\12\16\0\22\12\16\0\22\12"+
    "\16\0\15\12\1\0\3\12\17\0\64\12\43\0\1\12\4\0\1\12"+
    "\3\0\12\13\46\0\12\13\6\0\130\12\10\0\51\12\1\0\1\12"+
    "\5\0\106\12\12\0\37\12\47\0\12\13\36\12\2\0\5\12\13\0"+
    "\54\12\25\0\7\12\10\0\12\13\46\0\27\12\11\0\65\12\53\0"+
    "\12\13\6\0\12\13\15\0\1\12\135\0\57\12\21\0\7\12\4\0"+
    "\12\13\51\0\36\12\15\0\2\12\12\13\54\12\32\0\44\12\34\0"+
    "\12\13\3\0\3\12\12\13\44\12\153\0\4\12\1\0\4\12\3\0"+
    "\2\12\11\0\300\12\100\0\u0116\12\2\0\6\12\2\0\46\12\2\0"+
    "\6\12\2\0\10\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\37\12\2\0\65\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0"+
    "\7\12\3\0\4\12\2\0\6\12\4\0\15\12\5\0\3\12\1\0"+
    "\7\12\164\0\1\12\15\0\1\12\20\0\15\12\145\0\1\12\4\0"+
    "\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\4\12\1\0\13\12\2\0\4\12\5\0"+
    "\5\12\4\0\1\12\64\0\2\12\15\0\1\7\u0a6d\0\57\12\1\0"+
    "\57\12\1\0\205\12\6\0\4\12\3\0\2\12\14\0\46\12\1\0"+
    "\1\12\5\0\1\12\2\0\70\12\7\0\1\12\20\0\27\12\11\0"+
    "\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0"+
    "\7\12\1\0\7\12\1\0\7\12\120\0\1\12\u01d5\0\2\12\52\0"+
    "\5\12\5\0\2\12\4\0\126\12\6\0\3\12\1\0\132\12\1\0"+
    "\4\12\5\0\51\12\3\0\136\12\21\0\33\12\65\0\20\12\u0200\0"+
    "\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0\56\12\2\0\u010d\12\3\0"+
    "\20\12\12\13\2\12\24\0\57\12\20\0\37\12\2\0\106\12\61\0"+
    "\11\12\2\0\147\12\2\0\4\12\1\0\36\12\2\0\2\12\105\0"+
    "\13\12\1\0\3\12\1\0\4\12\1\0\27\12\35\0\64\12\16\0"+
    "\62\12\34\0\12\13\30\0\6\12\3\0\1\12\4\0\12\13\34\12"+
    "\12\0\27\12\31\0\35\12\7\0\57\12\34\0\1\12\12\13\6\0"+
    "\5\12\1\0\12\12\12\13\5\12\1\0\51\12\27\0\3\12\1\0"+
    "\10\12\4\0\12\13\6\0\27\12\3\0\1\12\3\0\62\12\1\0"+
    "\1\12\3\0\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\0"+
    "\3\12\2\0\13\12\7\0\3\12\14\0\6\12\2\0\6\12\2\0"+
    "\6\12\11\0\7\12\1\0\7\12\1\0\53\12\1\0\4\12\4\0"+
    "\2\12\132\0\43\12\15\0\12\13\6\0\u2ba4\12\14\0\27\12\4\0"+
    "\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12\14\0\5\12\5\0"+
    "\1\12\1\0\12\12\1\0\15\12\1\0\5\12\1\0\1\12\1\0"+
    "\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0\100\12\2\0"+
    "\66\12\50\0\14\12\164\0\5\12\1\0\207\12\23\0\12\13\7\0"+
    "\32\12\6\0\32\12\13\0\131\12\3\0\6\12\2\0\6\12\2\0"+
    "\6\12\2\0\3\12\43\0\14\12\1\0\32\12\1\0\23\12\1\0"+
    "\2\12\1\0\17\12\2\0\16\12\42\0\173\12\u0185\0\35\12\3\0"+
    "\61\12\57\0\40\12\20\0\21\12\1\0\10\12\6\0\46\12\12\0"+
    "\36\12\2\0\44\12\4\0\10\12\60\0\236\12\2\0\12\13\126\0"+
    "\50\12\10\0\64\12\234\0\u0137\12\11\0\26\12\12\0\10\12\230\0"+
    "\6\12\2\0\1\12\1\0\54\12\1\0\2\12\3\0\1\12\2\0"+
    "\27\12\12\0\27\12\11\0\37\12\141\0\26\12\12\0\32\12\106\0"+
    "\70\12\6\0\2\12\100\0\1\12\17\0\4\12\1\0\3\12\1\0"+
    "\33\12\54\0\35\12\3\0\35\12\43\0\10\12\1\0\34\12\33\0"+
    "\66\12\12\0\26\12\12\0\23\12\15\0\22\12\156\0\111\12\u03ba\0"+
    "\65\12\56\0\12\13\23\0\55\12\40\0\31\12\7\0\12\13\11\0"+
    "\44\12\17\0\12\13\20\0\43\12\3\0\1\12\14\0\60\12\16\0"+
    "\4\12\13\0\12\13\1\12\45\0\22\12\1\0\31\12\204\0\57\12"+
    "\21\0\12\13\13\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12"+
    "\1\0\2\12\1\0\5\12\3\0\1\12\37\0\5\12\u011e\0\60\12"+
    "\24\0\2\12\1\0\1\12\10\0\12\13\246\0\57\12\121\0\60\12"+
    "\24\0\1\12\13\0\12\13\46\0\53\12\25\0\12\13\u01d6\0\100\12"+
    "\12\13\25\0\1\12\u01c0\0\71\12\u0507\0\u0399\12\u0c67\0\u042f\12\u33d1\0"+
    "\u0239\12\7\0\37\12\1\0\12\13\146\0\36\12\22\0\60\12\20\0"+
    "\4\12\14\0\12\13\11\0\25\12\5\0\23\12\u0370\0\105\12\13\0"+
    "\1\12\102\0\15\12\u4060\0\2\12\u0bfe\0\153\12\5\0\15\12\3\0"+
    "\11\12\7\0\12\12\u1766\0\125\12\1\0\107\12\1\0\2\12\2\0"+
    "\1\12\2\0\2\12\2\0\4\12\1\0\14\12\1\0\1\12\1\0"+
    "\7\12\1\0\101\12\1\0\4\12\2\0\10\12\1\0\7\12\1\0"+
    "\34\12\1\0\4\12\1\0\5\12\1\0\1\12\3\0\7\12\1\0"+
    "\u0154\12\2\0\31\12\1\0\31\12\1\0\37\12\1\0\31\12\1\0"+
    "\37\12\1\0\31\12\1\0\37\12\1\0\31\12\1\0\37\12\1\0"+
    "\31\12\1\0\10\12\2\0\62\13\u1000\0\305\12\u053b\0\4\12\1\0"+
    "\33\12\1\0\2\12\1\0\1\12\2\0\1\12\1\0\12\12\1\0"+
    "\4\12\1\0\1\12\1\0\1\12\6\0\1\12\4\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\0\3\12\1\0\2\12\1\0\1\12\2\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\2\12\1\0\1\12\2\0\4\12\1\0\7\12\1\0\4\12\1\0"+
    "\4\12\1\0\1\12\1\0\12\12\1\0\21\12\5\0\3\12\1\0"+
    "\5\12\1\0\21\12\u1144\0\ua6d7\12\51\0\u1035\12\13\0\336\12\u3fe2\0"+
    "\u021e\12\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[10];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\14\0\30\0\14\0\14\0\14\0\14\0\14"+
    "\0\44\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[10];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\2\16\0\1\4\22\0\1\10\14\0"+
    "\2\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[60];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\5\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[10];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Token token(TokenType type) {
        return new Token(type, yyline, yycolumn);
    }

    private Token token(TokenType type, String content) {
        return new Token(type, yyline, yycolumn, content);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2392) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next() throws java.io.IOException, InvalidExpressionException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new InvalidExpressionException("Unexpected character \""+yytext()+"\"", yyline, yycolumn);
          }
        case 8: break;
        case 2: 
          { /* ignore */
          }
        case 9: break;
        case 3: 
          { return token(OPENING_BRACKET);
          }
        case 10: break;
        case 4: 
          { return token(CLOSING_BRACKET);
          }
        case 11: break;
        case 5: 
          { return token(LAMBDA);
          }
        case 12: break;
        case 6: 
          { return token(ARROW);
          }
        case 13: break;
        case 7: 
          { return token(IDENTIFIER, yytext());
          }
        case 14: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return token(END_OF_FILE);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
